#!/usr/bin/env python3
# list files on Toshiba FlashAir SD card via wi-fi
# see https://www.flashair-developers.com/en/documents/api/

import os
import sys
import argparse
import requests
import configparser
import flashair

def fmt(size):
    kb=size/1024
    mb=size/1048576
    gb=size/1073741824
    s='{:,.2f} GB'.format(gb)
    if gb < 1:
        s='{:,.2f} MB'.format(mb)
    if mb < 1:
        s='{:,.2f} KB'.format(kb)
    return s

card=flashair.card()
card.parser.add_argument('-s', '--sort', help='sort output lines (alpha, size, none)',
                         choices=['a', 's', 'n'], default=card.def_sort)
card.setup()
card.get_files()
if len(card.files) == 0:
    print('directory "'+card.dir+'" is empty')
    raise SystemExit

sum=0
output=[]
for file, size, attrib in card.files:
    if attrib & 16:
        # this is a directory
        output.append((0, file, '<DIR>', ''))
    else:
        # this is a file
        # comma-formatted number
        kb=size/1024
        mb=size/1048576
        gb=size/1073741824
        output.append((size, file, '{:,}'.format(size), fmt(size)))
        sum+=size

# sort
if card.sort == 'a':
    output.sort(key=lambda x: x[1])
if card.sort == 's':
    output.sort(key=lambda x: x[0])

# grab remaining space
r=requests.get('http://'+card.address+'/command.cgi?op=140')
t=r.text.split('/')
empty=int(t[0])
total, sector=map(int, t[1].split(','))
empty*=sector
total*=sector
used=total-empty
space=empty
pct_used=(used/total)*100.0
pct_empty=(empty/total)*100.0

# add totals
output.append((0, 'Dir Total:', '{:,}'.format(sum), fmt(sum)))
output.append((0, 'Used:', '{:,}'.format(used), fmt(used), '{:.2f}%'.format(pct_used)))
output.append((0, 'Free:', '{:,}'.format(space), fmt(space), '{:.2f}%'.format(pct_empty)))

# print in neat columns
width1=max(len(x[1]) for x in output)
width2=max(len(x[2]) for x in output)
width3=max(len(x[3]) for x in output)
width4=max(len(x[4]) for x in output if len(x) > 4)
output.insert(-3, (0, '-'*width1, '-'*width2, '-'*width3))
print('Directory:', card.dir)
for data in output:
    if len(data) == 4:
        print('{0:{1}} {2:>{3}} {4:>{5}}'.format(data[1], width1,
                                                 data[2], width2,
                                                 data[3], width3))
    else:
        print('{0:{1}} {2:>{3}} {4:>{5}} {6:>{7}}'.format(data[1], width1,
                                                          data[2], width2,
                                                          data[3], width3,
                                                          data[4], width4))
